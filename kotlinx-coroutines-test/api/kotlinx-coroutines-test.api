public abstract interface class kotlinx/coroutines/test/DelayController {
	public abstract fun advanceTimeBy (J)J
	public abstract fun advanceUntilIdle ()J
	public abstract fun cleanupTestCoroutines ()V
	public abstract fun getCurrentTime ()J
	public abstract fun pauseDispatcher ()V
	public abstract fun pauseDispatcher (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun resumeDispatcher ()V
	public abstract fun runCurrent ()V
}

public final class kotlinx/coroutines/test/StandardTestDispatcher : kotlinx/coroutines/test/TestDispatcher, kotlinx/coroutines/Delay {
	public fun <init> ()V
	public fun <init> (Lkotlinx/coroutines/test/TestCoroutineScheduler;Ljava/lang/String;)V
	public synthetic fun <init> (Lkotlinx/coroutines/test/TestCoroutineScheduler;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun dispatch (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V
	public fun getScheduler ()Lkotlinx/coroutines/test/TestCoroutineScheduler;
	public fun toString ()Ljava/lang/String;
}

public final class kotlinx/coroutines/test/TestBuildersKt {
	public static final fun runBlockingTest (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;)V
	public static final fun runBlockingTest (Lkotlinx/coroutines/test/TestCoroutineDispatcher;Lkotlin/jvm/functions/Function2;)V
	public static final fun runBlockingTest (Lkotlinx/coroutines/test/TestCoroutineScope;Lkotlin/jvm/functions/Function2;)V
	public static synthetic fun runBlockingTest$default (Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/functions/Function2;ILjava/lang/Object;)V
	public static final fun runTest (Lkotlin/coroutines/CoroutineContext;JLkotlin/jvm/functions/Function2;)V
	public static final fun runTest (Lkotlinx/coroutines/test/TestCoroutineScope;JLkotlin/jvm/functions/Function2;)V
	public static final fun runTest (Lkotlinx/coroutines/test/TestDispatcher;JLkotlin/jvm/functions/Function2;)V
	public static synthetic fun runTest$default (Lkotlin/coroutines/CoroutineContext;JLkotlin/jvm/functions/Function2;ILjava/lang/Object;)V
	public static synthetic fun runTest$default (Lkotlinx/coroutines/test/TestCoroutineScope;JLkotlin/jvm/functions/Function2;ILjava/lang/Object;)V
	public static synthetic fun runTest$default (Lkotlinx/coroutines/test/TestDispatcher;JLkotlin/jvm/functions/Function2;ILjava/lang/Object;)V
}

public final class kotlinx/coroutines/test/TestCoroutineDispatcher : kotlinx/coroutines/test/TestDispatcher, kotlinx/coroutines/Delay, kotlinx/coroutines/test/SchedulerAsDelayController {
	public fun <init> ()V
	public fun <init> (Lkotlinx/coroutines/test/TestCoroutineScheduler;)V
	public synthetic fun <init> (Lkotlinx/coroutines/test/TestCoroutineScheduler;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun advanceTimeBy (J)J
	public fun advanceUntilIdle ()J
	public fun cleanupTestCoroutines ()V
	public fun dispatch (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V
	public fun dispatchYield (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V
	public fun getCurrentTime ()J
	public fun getScheduler ()Lkotlinx/coroutines/test/TestCoroutineScheduler;
	public fun pauseDispatcher ()V
	public fun pauseDispatcher (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun resumeDispatcher ()V
	public fun runCurrent ()V
	public fun toString ()Ljava/lang/String;
}

public final class kotlinx/coroutines/test/TestCoroutineExceptionHandler : kotlin/coroutines/AbstractCoroutineContextElement, kotlinx/coroutines/CoroutineExceptionHandler, kotlinx/coroutines/test/UncaughtExceptionCaptor {
	public fun <init> ()V
	public fun cleanupTestCoroutines ()V
	public fun getUncaughtExceptions ()Ljava/util/List;
	public fun handleException (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Throwable;)V
}

public final class kotlinx/coroutines/test/TestCoroutineScheduler : kotlin/coroutines/AbstractCoroutineContextElement, kotlin/coroutines/CoroutineContext$Element {
	public static final field Key Lkotlinx/coroutines/test/TestCoroutineScheduler$Key;
	public fun <init> ()V
	public final fun advanceTimeBy (J)V
	public final fun advanceUntilIdle ()V
	public final fun getCurrentTime ()J
	public final fun runCurrent ()V
}

public final class kotlinx/coroutines/test/TestCoroutineScheduler$Key : kotlin/coroutines/CoroutineContext$Key {
}

public abstract interface class kotlinx/coroutines/test/TestCoroutineScope : kotlinx/coroutines/CoroutineScope {
	public abstract fun cleanupTestCoroutines ()V
	public abstract fun getTestScheduler ()Lkotlinx/coroutines/test/TestCoroutineScheduler;
	public abstract fun reportException (Ljava/lang/Throwable;)V
}

public final class kotlinx/coroutines/test/TestCoroutineScope$DefaultImpls {
	public static fun getTestScheduler (Lkotlinx/coroutines/test/TestCoroutineScope;)Lkotlinx/coroutines/test/TestCoroutineScheduler;
}

public final class kotlinx/coroutines/test/TestCoroutineScopeKt {
	public static final fun TestCoroutineScope (Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/test/TestCoroutineScope;
	public static synthetic fun TestCoroutineScope$default (Lkotlin/coroutines/CoroutineContext;ILjava/lang/Object;)Lkotlinx/coroutines/test/TestCoroutineScope;
	public static final fun advanceTimeBy (Lkotlinx/coroutines/test/TestCoroutineScope;J)V
	public static final fun advanceUntilIdle (Lkotlinx/coroutines/test/TestCoroutineScope;)V
	public static final fun createTestCoroutineScope (Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/test/TestCoroutineScope;
	public static synthetic fun createTestCoroutineScope$default (Lkotlin/coroutines/CoroutineContext;ILjava/lang/Object;)Lkotlinx/coroutines/test/TestCoroutineScope;
	public static final fun getCurrentTime (Lkotlinx/coroutines/test/TestCoroutineScope;)J
	public static final fun getUncaughtExceptions (Lkotlinx/coroutines/test/TestCoroutineScope;)Ljava/util/List;
	public static final fun pauseDispatcher (Lkotlinx/coroutines/test/TestCoroutineScope;)V
	public static final fun pauseDispatcher (Lkotlinx/coroutines/test/TestCoroutineScope;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun resumeDispatcher (Lkotlinx/coroutines/test/TestCoroutineScope;)V
	public static final fun runCurrent (Lkotlinx/coroutines/test/TestCoroutineScope;)V
}

public abstract class kotlinx/coroutines/test/TestDispatcher : kotlinx/coroutines/CoroutineDispatcher, kotlinx/coroutines/Delay {
	public fun <init> ()V
	public fun delay (JLkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getScheduler ()Lkotlinx/coroutines/test/TestCoroutineScheduler;
	public fun invokeOnTimeout (JLjava/lang/Runnable;Lkotlin/coroutines/CoroutineContext;)Lkotlinx/coroutines/DisposableHandle;
	public fun scheduleResumeAfterDelay (JLkotlinx/coroutines/CancellableContinuation;)V
}

public final class kotlinx/coroutines/test/TestDispatchers {
	public static final fun resetMain (Lkotlinx/coroutines/Dispatchers;)V
	public static final fun setMain (Lkotlinx/coroutines/Dispatchers;Lkotlinx/coroutines/CoroutineDispatcher;)V
}

public final class kotlinx/coroutines/test/TestExceptionHandlerKt {
	public static final fun TestExceptionHandler (Lkotlinx/coroutines/test/TestCoroutineScope;Lkotlin/jvm/functions/Function3;)Lkotlinx/coroutines/CoroutineExceptionHandler;
	public static synthetic fun TestExceptionHandler$default (Lkotlinx/coroutines/test/TestCoroutineScope;Lkotlin/jvm/functions/Function3;ILjava/lang/Object;)Lkotlinx/coroutines/CoroutineExceptionHandler;
}

public abstract interface class kotlinx/coroutines/test/UncaughtExceptionCaptor {
	public abstract fun cleanupTestCoroutines ()V
	public abstract fun getUncaughtExceptions ()Ljava/util/List;
}

public final class kotlinx/coroutines/test/UncompletedCoroutinesError : java/lang/AssertionError {
	public fun <init> (Ljava/lang/String;)V
}

public final class kotlinx/coroutines/test/UnconfinedTestDispatcher : kotlinx/coroutines/test/TestDispatcher, kotlinx/coroutines/Delay {
	public fun <init> ()V
	public fun <init> (Lkotlinx/coroutines/test/TestCoroutineScheduler;Ljava/lang/String;)V
	public synthetic fun <init> (Lkotlinx/coroutines/test/TestCoroutineScheduler;Ljava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun dispatch (Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V
	public fun getScheduler ()Lkotlinx/coroutines/test/TestCoroutineScheduler;
	public fun isDispatchNeeded (Lkotlin/coroutines/CoroutineContext;)Z
	public fun toString ()Ljava/lang/String;
}

